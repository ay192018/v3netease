'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var service = require('@tarojs/service');
var template = require('@tarojs/shared/dist/template');
var shared = require('@tarojs/shared');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class Template extends template.RecursiveTemplate {
    constructor() {
        super(...arguments);
        this.supportXS = false;
        this.Adapter = {
            if: 'tt:if',
            else: 'tt:else',
            elseif: 'tt:elif',
            for: 'tt:for',
            forItem: 'tt:for-item',
            forIndex: 'tt:for-index',
            key: 'tt:key',
            type: 'tt'
        };
    }
    replacePropName(name, value) {
        if (value === 'eh') {
            const nameLowerCase = name.toLowerCase();
            if (nameLowerCase === 'bindlongtap')
                return 'bindlongpress';
            return nameLowerCase;
        }
        return name;
    }
}

const components = {
    // ======== 调整属性 ========
    Icon: {
        size: '24'
    },
    Button: {
        bindGetPhoneNumber: '',
        'data-channel': ''
    },
    Form: {
        'report-submit-timeout': '0'
    },
    Slider: {
        color: shared.singleQuote('#e9e9e9'),
        'selected-color': shared.singleQuote('#1aad19')
    },
    WebView: {
        'progressbar-color': shared.singleQuote('#51a0d8')
    },
    Video: {
        'play-btn-position': shared.singleQuote('center'),
        'pre-roll-unit-id': '',
        'post-roll-unit-id': '',
        bindAdStart: '',
        bindAdEnded: '',
        bindAdLoad: '',
        bindAdClose: '',
        bindAdError: ''
    },
    Ad: {
        fixed: '',
        type: shared.singleQuote('banner'),
        scale: '100'
    },
    Textarea: {
        'disable-default-padding': 'false'
    },
    Canvas: {
        type: ''
    }
};

const PACKAGE_NAME = '@tarojs/plugin-platform-tt';
class TT extends service.TaroPlatformBase {
    /**
     * 1. setupTransaction - init
     * 2. setup
     * 3. setupTransaction - close
     * 4. buildTransaction - init
     * 5. build
     * 6. buildTransaction - close
     */
    constructor(ctx, config) {
        super(ctx, config);
        this.platform = 'tt';
        this.globalObject = 'tt';
        this.projectConfigJson = 'project.tt.json';
        this.runtimePath = `${PACKAGE_NAME}/dist/runtime`;
        this.fileType = {
            templ: '.ttml',
            style: '.ttss',
            config: '.json',
            script: '.js'
        };
        this.template = new Template();
        this.setupTransaction.addWrapper({
            close: this.modifyTemplate
        });
    }
    /**
     * 增加组件或修改组件属性
     */
    modifyTemplate() {
        this.template.mergeComponents(this.ctx, components);
    }
}

var index = (ctx) => {
    ctx.registerPlatform({
        name: 'tt',
        useConfigName: 'mini',
        fn({ config }) {
            return __awaiter(this, void 0, void 0, function* () {
                const program = new TT(ctx, config);
                yield program.start();
            });
        }
    });
};

exports.TT = TT;
exports['default'] = index;
//# sourceMappingURL=index.js.map
