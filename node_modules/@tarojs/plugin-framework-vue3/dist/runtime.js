import { getPageInstance, injectPageInstance, Current, container, SERVICE_IDENTIFIER } from '@tarojs/runtime';
import { inject, ref, onMounted } from 'vue';
import { isUndefined, isFunction, isArray, ensure } from '@tarojs/shared';

function createHook(lifecycle) {
    return fn => {
        const id = inject('id');
        const fnRef = ref(fn);
        onMounted(() => {
            let inst = getPageInstance(id);
            if (inst === undefined) {
                inst = Object.create({
                    $options: {}
                });
                injectPageInstance(inst, id);
            }
            inst = inst.$options;
            const callback = (...args) => fnRef.value(...args);
            const currentCallback = inst[lifecycle];
            if (isUndefined(currentCallback)) {
                inst[lifecycle] = callback;
            }
            else if (isFunction(currentCallback)) {
                inst[lifecycle] = [inst[lifecycle], callback];
            }
            else if (isArray(currentCallback)) {
                inst[lifecycle] = [...currentCallback, callback];
            }
        });
    };
}
const useDidShow = createHook('onShow');
const useDidHide = createHook('onHide');
const useReady = createHook('onReady');
const usePullDownRefresh = createHook('onPullDownRefresh');
const useReachBottom = createHook('onReachBottom');
const usePageScroll = createHook('onPageScroll');
const useResize = createHook('onResize');
const useShareAppMessage = createHook('onShareAppMessage');
const useTabItemTap = createHook('onTabItemTap');
const useTitleClick = createHook('onTitleClick');
const useOptionMenuClick = createHook('onOptionMenuClick');
const usePullIntercept = createHook('onPullIntercept');
const useShareTimeline = createHook('onShareTimeline');
const useAddToFavorites = createHook('onAddToFavorites');
const useRouter = () => {
    // return dynamic ? Current.router : React.useMemo(() => Current.router, [])
    return Current.router;
};

var taroHooks = /*#__PURE__*/Object.freeze({
  __proto__: null,
  useDidShow: useDidShow,
  useDidHide: useDidHide,
  useReady: useReady,
  usePullDownRefresh: usePullDownRefresh,
  useReachBottom: useReachBottom,
  usePageScroll: usePageScroll,
  useResize: useResize,
  useShareAppMessage: useShareAppMessage,
  useTabItemTap: useTabItemTap,
  useTitleClick: useTitleClick,
  useOptionMenuClick: useOptionMenuClick,
  usePullIntercept: usePullIntercept,
  useShareTimeline: useShareTimeline,
  useAddToFavorites: useAddToFavorites,
  useRouter: useRouter
});

const setGlobalDataPlugin = {
    install: (app, data) => {
        app.taroGlobalData = data;
    }
};

/**
 * set writable, enumerable to true
 */
function setDefaultDescriptor(obj) {
    obj.writable = true;
    obj.enumerable = true;
    return obj;
}
/**
 * 设置入口的路由参数
 * @param options 小程序传入的参数
 */
function setRouterParams(options) {
    Current.router = Object.assign({ params: options === null || options === void 0 ? void 0 : options.query }, options);
}

function setReconciler() {
    var _a;
    const hooks = container.get(SERVICE_IDENTIFIER.Hooks);
    hooks.getLifecycle = function (instance, lifecycle) {
        return instance.$options[lifecycle];
    };
    (_a = hooks.modifyMpEventImpls) === null || _a === void 0 ? void 0 : _a.push(function (event) {
        event.type = event.type.replace(/-/g, '');
    });
    if (process.env.TARO_ENV === 'h5') {
        hooks.createPullDownComponent = (component, path, h) => {
            const inject = {
                props: {
                    tid: String
                },
                created() {
                    injectPageInstance(this, path);
                }
            };
            component.mixins = isArray(component.mixins)
                ? component.mixins.push(inject)
                : [inject];
            return {
                render() {
                    return h('taro-pull-to-refresh', {
                        class: 'hydrated'
                    }, [h(component, this.$slots.default)]);
                }
            };
        };
        hooks.getDOMNode = (el) => {
            return el.$el;
        };
    }
}
function createVue3Page(h, id) {
    return function (component) {
        var _a;
        const inject = {
            props: {
                tid: String
            },
            created() {
                injectPageInstance(this, id);
            }
        };
        if (isArray(component.mixins)) {
            const mixins = component.mixins;
            const idx = mixins.length - 1;
            if (!((_a = mixins[idx].props) === null || _a === void 0 ? void 0 : _a.tid)) {
                // mixins 里还没注入过，直接推入数组
                component.mixins.push(inject);
            }
            else {
                // mixins 里已经注入过，代替前者
                component.mixins[idx] = inject;
            }
        }
        else {
            component.mixins = [inject];
        }
        const ProviderComponent = {
            provide: { id },
            render() {
                return this.$slots.default();
            }
        };
        const RootElement = process.env.TARO_ENV === 'h5' ? 'div' : 'root';
        const PageComponent = Object.assign({}, component);
        return h(ProviderComponent, {
            key: id
        }, {
            default() {
                return [
                    h(RootElement, {
                        id,
                        class: process.env.TARO_ENV === 'h5' ? 'taro_page' : ''
                    }, [
                        h(PageComponent, { tid: id })
                    ])
                ];
            }
        });
    };
}
function createVue3App(app, h, config) {
    let pages = [];
    let appInstance;
    ensure(!isFunction(app._component), '入口组件不支持使用函数式组件');
    setReconciler();
    app._component.render = function () {
        return pages.slice();
    };
    if (process.env.TARO_ENV !== 'h5') {
        appInstance = app.mount('#app');
    }
    const hooks = container.get(SERVICE_IDENTIFIER.Hooks);
    const [ONLAUNCH, ONSHOW, ONHIDE] = hooks.getMiniLifecycleImpl().app;
    const appConfig = Object.create({
        mount(component, id, cb) {
            const page = createVue3Page(h, id)(component);
            pages.push(page);
            this.updateAppInstance(cb);
        },
        unmount(id, cb) {
            pages = pages.filter(page => page.key !== id);
            this.updateAppInstance(cb);
        },
        updateAppInstance(cb) {
            appInstance.$forceUpdate();
            appInstance.$nextTick(cb);
        }
    }, {
        config: setDefaultDescriptor({
            configurable: true,
            value: config
        }),
        [ONLAUNCH]: setDefaultDescriptor({
            value(options) {
                var _a;
                setRouterParams(options);
                if (process.env.TARO_ENV === 'h5') {
                    appInstance = app.mount(`#${config.appId || 'app'}`);
                }
                // 把 App Class 上挂载的额外属性同步到全局 app 对象中
                // eslint-disable-next-line dot-notation
                if (app['taroGlobalData']) {
                    // eslint-disable-next-line dot-notation
                    const globalData = app['taroGlobalData'];
                    const keys = Object.keys(globalData);
                    const descriptors = Object.getOwnPropertyDescriptors(globalData);
                    keys.forEach(key => {
                        Object.defineProperty(this, key, {
                            configurable: true,
                            enumerable: true,
                            get() {
                                return globalData[key];
                            },
                            set(value) {
                                globalData[key] = value;
                            }
                        });
                    });
                    Object.defineProperties(this, descriptors);
                }
                const onLaunch = (_a = appInstance === null || appInstance === void 0 ? void 0 : appInstance.$options) === null || _a === void 0 ? void 0 : _a.onLaunch;
                isFunction(onLaunch) && onLaunch.call(appInstance, options);
            }
        }),
        [ONSHOW]: setDefaultDescriptor({
            value(options) {
                var _a;
                setRouterParams(options);
                const onShow = (_a = appInstance === null || appInstance === void 0 ? void 0 : appInstance.$options) === null || _a === void 0 ? void 0 : _a.onShow;
                isFunction(onShow) && onShow.call(appInstance, options);
            }
        }),
        [ONHIDE]: setDefaultDescriptor({
            value(options) {
                var _a;
                const onHide = (_a = appInstance === null || appInstance === void 0 ? void 0 : appInstance.$options) === null || _a === void 0 ? void 0 : _a.onHide;
                isFunction(onHide) && onHide.call(appInstance, options);
            }
        })
    });
    Current.app = appConfig;
    return appConfig;
}

const hooks = container.get(SERVICE_IDENTIFIER.Hooks);
hooks.initNativeApiImpls || (hooks.initNativeApiImpls = []);
hooks.initNativeApiImpls.push(function (taro) {
    for (const hook in taroHooks) {
        taro[hook] = taroHooks[hook];
    }
    taro.setGlobalDataPlugin = setGlobalDataPlugin;
});

export { createVue3App, setGlobalDataPlugin, useAddToFavorites, useDidHide, useDidShow, useOptionMenuClick, usePageScroll, usePullDownRefresh, usePullIntercept, useReachBottom, useReady, useResize, useRouter, useShareAppMessage, useShareTimeline, useTabItemTap, useTitleClick };
//# sourceMappingURL=runtime.js.map
