export class MethodHandler {
    constructor({ name, success, fail, complete }) {
        this.methodName = name;
        this.__success = success;
        this.__fail = fail;
        this.__complete = complete;
    }
    success(res = {}, resolve = Promise.resolve.bind(Promise)) {
        if (!res.errMsg) {
            res.errMsg = `${this.methodName}:ok`;
        }
        typeof this.__success === 'function' && this.__success(res);
        typeof this.__complete === 'function' && this.__complete(res);
        return resolve(res);
    }
    fail(res = {}, reject = Promise.reject.bind(Promise)) {
        if (!res.errMsg) {
            res.errMsg = `${this.methodName}:fail`;
        }
        else {
            res.errMsg = `${this.methodName}:fail ${res.errMsg}`;
        }
        console.error(res.errMsg);
        typeof this.__fail === 'function' && this.__fail(res);
        typeof this.__complete === 'function' && this.__complete(res);
        return reject(res);
    }
}
export class CallbackManager {
    constructor() {
        this.callbacks = [];
    }
    /**
     * 添加回调
     * @param {{ callback: function, ctx: any } | function} opt
     */
    add(opt) {
        if (opt)
            this.callbacks.push(opt);
    }
    /**
     * 移除回调
     * @param {{ callback: function, ctx: any } | function} opt
     */
    remove(opt) {
        if (opt) {
            let pos = -1;
            this.callbacks.forEach((callback, k) => {
                if (callback === opt) {
                    pos = k;
                }
            });
            if (pos > -1) {
                this.callbacks.splice(pos, 1);
            }
        }
    }
    /**
     * 获取回调函数数量
     * @return {number}
     */
    count() {
        return this.callbacks.length;
    }
    /**
     * 触发回调
     * @param  {...any} args 回调的调用参数
     */
    trigger(...args) {
        this.callbacks.forEach(opt => {
            if (typeof opt === 'function') {
                opt(...args);
            }
            else {
                const { callback, ctx } = opt;
                typeof callback === 'function' && callback.call(ctx, ...args);
            }
        });
    }
}
