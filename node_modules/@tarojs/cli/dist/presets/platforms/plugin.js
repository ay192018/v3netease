"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (ctx) => {
    ctx.registerPlatform({
        name: 'plugin',
        useConfigName: 'mini',
        fn({ config }) {
            return __awaiter(this, void 0, void 0, function* () {
                const { options, _ } = ctx.runOpts;
                const { chalk, PLATFORMS } = ctx.helper;
                const { WEAPP, ALIPAY } = PLATFORMS;
                const typeMap = {
                    [WEAPP]: '微信',
                    [ALIPAY]: '支付宝'
                };
                const { plugin, isWatch } = options;
                if (plugin !== WEAPP && plugin !== ALIPAY) {
                    console.log(chalk.red('目前插件编译仅支持 微信/支付宝 小程序！'));
                    return;
                }
                console.log(chalk.green(`开始编译${typeMap[plugin]}小程序插件`));
                function buildPlugin(type) {
                    return __awaiter(this, void 0, void 0, function* () {
                        process.env.TARO_ENV = type;
                        yield ctx.applyPlugins({
                            name: 'build',
                            opts: {
                                config: Object.assign(Object.assign({}, config), { isBuildPlugin: true, isWatch, outputRoot: `${config.outputRoot}`, platform: type, needClearOutput: false }),
                                options: Object.assign({}, options, {
                                    platform: type
                                }),
                                _
                            }
                        });
                        yield ctx.applyPlugins({
                            name: 'build',
                            opts: {
                                config: Object.assign(Object.assign({}, config), { isBuildPlugin: false, isWatch, outputRoot: `${config.outputRoot}/miniprogram`, platform: type, needClearOutput: false }),
                                options: Object.assign({}, options, {
                                    platform: type
                                }),
                                _
                            }
                        });
                    });
                }
                buildPlugin(plugin);
            });
        }
    });
};
//# sourceMappingURL=plugin.js.map