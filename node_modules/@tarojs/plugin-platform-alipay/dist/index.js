'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var service = require('@tarojs/service');
var shared = require('@tarojs/shared');
var template = require('@tarojs/shared/dist/template');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class Template extends template.RecursiveTemplate {
    constructor() {
        super(...arguments);
        this.exportExpr = 'export default';
        this.supportXS = true;
        this.Adapter = {
            if: 'a:if',
            else: 'a:else',
            elseif: 'a:elif',
            for: 'a:for',
            forItem: 'a:for-item',
            forIndex: 'a:for-index',
            key: 'a:key',
            xs: 'sjs',
            type: 'alipay'
        };
        this.modifyLoopBody = (child, nodeName) => {
            if (nodeName === 'picker-view') {
                return `<picker-view-column>
        <view a:for="{{item.cn}}" a:key="sid">
          ${child}
        </view>
      </picker-view-column>`;
            }
            return child;
        };
        this.modifyLoopContainer = (children, nodeName) => {
            if (nodeName === 'picker') {
                return `
  <view>${children}</view>
  `;
            }
            if (nodeName === 'swiper') {
                return `
    <block a:for="{{xs.f(i.cn)}}" a:key="sid">
      <swiper-item class="{{item.cl}}" style="{{item.st}}" id="{{item.uid||item.sid}}" data-sid="{{item.sid}}">
        <block a:for="{{item.cn}}" a:key="sid">
          <template is="{{xs.e(0)}}" data="{{i:item}}" />
        </block>
      </swiper-item>
    </block>
  `;
            }
            return children;
        };
        this.modifyTemplateResult = (res, nodeName) => {
            if (nodeName === 'picker-view-column' || nodeName === 'swiper-item')
                return '';
            return res;
        };
        this.modifyThirdPartyLoopBody = () => {
            // 兼容支付宝 2.0 构建
            return `<view a:if="{{item.nn==='slot'}}" slot="{{item.name}}" id="{{item.uid||item.sid}}" data-sid="{{item.sid}}">
        <block a:for="{{item.cn}}" a:key="sid">
          <template is="{{xs.e(0)}}" data="{{i:item}}" />
        </block>
      </view>
      <template a:else is="{{xs.e(0)}}" data="{{i:item}}" />`;
        };
    }
    buildXsTemplate() {
        return '<import-sjs name="xs" from="./utils.sjs" />';
    }
    replacePropName(name, value, compName) {
        if (value === 'eh')
            return name.replace('bind', 'on');
        if (compName === 'map' && value.includes('polygons')) {
            name = 'polygon';
        }
        return name;
    }
    getEvents() {
        return {
            onTap: 'eh',
            onTouchMove: 'eh',
            onTouchEnd: 'eh',
            onTouchCancel: 'eh',
            onLongTap: 'eh'
        };
    }
    buildThirdPartyAttr(attrs) {
        return [...attrs].reduce((str, attr) => {
            if (attr.startsWith('@')) {
                return str + `on${shared.capitalize(attr.slice(1))}="eh" `;
            }
            else if (attr.startsWith('bind')) {
                return str + `${attr}="eh" `;
            }
            else if (attr.startsWith('on')) {
                return str + `${attr}="eh" `;
            }
            return str + `${attr}="{{ i.${shared.toCamelCase(attr)} }}" `;
        }, '');
    }
    createMiniComponents(components) {
        const result = super.createMiniComponents(components);
        // 兼容支付宝 2.0 构建
        delete result.slot;
        delete result['slot-view'];
        return result;
    }
    buildXSTmpExtra() {
        return `f: function (l) {
    return l.filter(function (i) {return i.nn === 'swiper-item'})
  }`;
    }
}

const components = {
    // ======== 调整属性 ========
    View: {
        'disable-scroll': 'false',
        hidden: 'false',
        bindAppear: '',
        bindDisappear: '',
        bindFirstAppear: ''
    },
    Text: {
        'number-of-lines': ''
    },
    Map: {
        skew: '0',
        rotate: '0',
        polygons: '[]',
        'include-padding': '',
        'ground-overlays': '',
        'tile-overlay': '',
        'custom-map-style': '',
        setting: '{}',
        optimize: '',
        bindRegionChange: '',
        bindPanelTap: ''
    },
    Button: {
        scope: '',
        'public-id': '',
        bindGetAuthorize: '',
        bindError: ''
    },
    Checkbox: {
        bindChange: ''
    },
    Input: {
        'random-number': 'false',
        controlled: 'false',
        enableNative: 'false'
    },
    Slider: {
        'track-size': '4',
        'handle-size': '22',
        'handle-color': shared.singleQuote('#ffffff')
    },
    Switch: {
        controlled: 'false'
    },
    Textarea: {
        'show-count': 'true',
        controlled: 'false',
        enableNative: 'false'
    },
    MovableView: {
        bindChangeEnd: ''
    },
    ScrollView: {
        'scroll-animation-duration': '',
        'trap-scroll': 'false'
    },
    Swiper: {
        'active-class': '',
        'changing-class': '',
        acceleration: 'false',
        'disable-programmatic-animation': 'false',
        'disable-touch': 'false',
        bindAnimationEnd: ''
    },
    Image: {
        'default-source': ''
    },
    Canvas: {
        type: '',
        width: shared.singleQuote('300px'),
        height: shared.singleQuote('225px'),
        bindReady: ''
    },
    Video: {
        'poster-size': shared.singleQuote('contain'),
        'mobilenet-hint-type': '1',
        enableNative: 'false',
        bindLoading: '',
        bindUserAction: '',
        bindStop: '',
        bindRenderStart: ''
    },
    // ======== 额外组件 ========
    Lottie: {
        autoplay: 'false',
        path: '',
        speed: '1.0',
        repeatCount: '0',
        autoReverse: 'false',
        assetsPath: '',
        placeholder: '',
        djangoId: '',
        md5: '',
        optimize: 'false',
        bindDataReady: '',
        bindDataFailed: '',
        bindAnimationStart: '',
        bindAnimationEnd: '',
        bindAnimationRepeat: '',
        bindAnimationCancel: '',
        bindDataLoadReady: ''
    },
    Lifestyle: {
        'public-id': '',
        memo: '',
        bindFollow: ''
    },
    LifeFollow: {
        sceneId: '',
        checkFollow: '',
        bindCheckFollow: '',
        bindClose: ''
    },
    ContactButton: {
        'tnt-inst-id': '',
        scene: '',
        size: '25',
        color: shared.singleQuote('#00A3FF'),
        icon: '',
        'alipay-card-no': '',
        'ext-info': ''
    }
};

const PACKAGE_NAME = '@tarojs/plugin-platform-alipay';
class Alipay extends service.TaroPlatformBase {
    /**
     * 1. setupTransaction - init
     * 2. setup
     * 3. setupTransaction - close
     * 4. buildTransaction - init
     * 5. build
     * 6. buildTransaction - close
     */
    constructor(ctx, config) {
        super(ctx, config);
        this.platform = 'alipay';
        this.globalObject = 'my';
        this.runtimePath = `${PACKAGE_NAME}/dist/runtime`;
        this.taroComponentsPath = `${PACKAGE_NAME}/dist/components-react`;
        this.fileType = {
            templ: '.axml',
            style: '.acss',
            config: '.json',
            script: '.js',
            xs: '.sjs'
        };
        this.template = new Template();
        this.setupTransaction.addWrapper({
            close() {
                this.modifyMiniConfigs();
                this.modifyComponents();
                this.modifyWebpackConfig();
                this.generateProjectConfig('project.alipay.json', 'mini.project.json');
            }
        });
    }
    /**
     * 转换用户编写的配置（微信小程序标准）为支付宝小程序标准
     */
    modifyMiniConfigs() {
        this.ctx.modifyMiniConfigs(({ configMap }) => {
            const replaceKeyMap = {
                navigationBarTitleText: 'defaultTitle',
                navigationBarBackgroundColor: 'titleBarColor',
                enablePullDownRefresh: 'pullRefresh',
                list: 'items',
                text: 'name',
                iconPath: 'icon',
                selectedIconPath: 'activeIcon',
                color: 'textColor'
            };
            Object.keys(configMap).forEach(key => {
                const item = configMap[key];
                if (item.content) {
                    this.recursiveReplaceObjectKeys(item.content, replaceKeyMap);
                }
            });
        });
    }
    /**
     * 增加组件或修改组件属性
     */
    modifyComponents() {
        const { internalComponents } = this.template;
        this.template.mergeComponents(this.ctx, components);
        this.modifySlider(internalComponents.Slider);
        this.modifySwiper(internalComponents.Swiper);
    }
    /**
     * 修改 Slider 组件属性
     */
    modifySlider(slider) {
        delete slider['block-size'];
        delete slider['block-color'];
    }
    /**
     * 修改 Swiper 组件属性
     */
    modifySwiper(swiper) {
        delete swiper.bindAnimationFinish;
    }
    /**
     * 修改 Webpack 配置
     */
    modifyWebpackConfig() {
        this.ctx.modifyWebpackChain(({ chain }) => {
            // 支付宝系小程序全局就有 navigator 对象，不需要模拟
            chain.plugin('providerPlugin')
                .tap(args => {
                const newArgs = Object.assign({}, args[0]);
                delete newArgs.navigator;
                return [newArgs];
            });
        });
    }
}

let registedModifyPageTemplate = false;
var index = (ctx) => {
    ctx.registerPlatform({
        name: 'alipay',
        useConfigName: 'mini',
        fn({ config }) {
            return __awaiter(this, void 0, void 0, function* () {
                !registedModifyPageTemplate && modifyPageTemplate(ctx);
                const program = new Alipay(ctx, config);
                yield program.start();
            });
        }
    });
};
function getIsBuildPluginPath(filePath, isBuildPlugin) {
    return isBuildPlugin ? `plugin/${filePath}` : filePath;
}
// 支付宝小程序中，如果某个页面依赖了原生小程序组件，
// 那么这个页面不能使用公共模板 base.axml，
// 而需要把公共模板的内容在此页面的模板中复制一份, 。
function modifyPageTemplate(ctx) {
    registedModifyPageTemplate = true;
    ctx.modifyBuildAssets(({ assets, miniPlugin }) => {
        const pages = [];
        // 筛选出使用了自定义组件的页面
        miniPlugin.pages.forEach(page => {
            const config = miniPlugin.filesConfig[miniPlugin.getConfigFilePath(page.name)].content;
            if (!page.isNative && (config === null || config === void 0 ? void 0 : config.hasOwnProperty('usingComponents')) && Object.keys(config.usingComponents).length) {
                pages.push(page.name);
            }
        });
        if (!pages.length)
            return;
        const baseXml = assets[getIsBuildPluginPath('base.axml', miniPlugin.options.isBuildPlugin)].source();
        pages.forEach(page => {
            const templateName = `${page}.axml`;
            const assetsItem = assets[templateName];
            const src = assetsItem._value ? assetsItem._value.toString() : assetsItem.source();
            let relativePath;
            const templateCaller = src.replace(/<import src="(.*)base\.axml"\/>/, function (_, $1) {
                relativePath = $1;
                return '';
            });
            const main = baseXml.replace(/<import-sjs name="xs" from="(.*)utils.sjs" \/>/, function () {
                return `<import-sjs name="xs" from="${relativePath}utils.sjs" />`;
            });
            const res = `${templateCaller}
${main}`;
            assets[templateName] = {
                size: () => res.length,
                source: () => res
            };
        });
        if (miniPlugin.options.isBuildPlugin) {
            const miniProjectJSONStr = JSON.stringify({
                miniprogramRoot: 'miniprogram',
                pluginRoot: 'plugin',
                compileType: 'plugin'
            }, null, 2);
            assets['mini.project.json'] = {
                size: () => miniProjectJSONStr.length,
                source: () => miniProjectJSONStr
            };
            const pluginJSON = JSON.parse(assets['/plugin/plugin.json'].source());
            pluginJSON.publicPages = pluginJSON.pages;
            delete pluginJSON.pages;
            const pluginJSONStr = JSON.stringify(pluginJSON, null, 2);
            assets['/plugin/plugin.json'] = {
                size: () => pluginJSONStr.length,
                source: () => pluginJSONStr
            };
        }
    });
}

exports.Alipay = Alipay;
exports['default'] = index;
//# sourceMappingURL=index.js.map
