"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loader_utils_1 = require("loader-utils");
const path_1 = require("path");
const helper_1 = require("@tarojs/helper");
function genResource(path, pages, loaderContext) {
    const stringify = (s) => loader_utils_1.stringifyRequest(loaderContext, s);
    return `
  Object.assign({
      path: '${path}',
      load: function() {
          return import(${stringify(path_1.join(loaderContext.context, path))})
      }
  }, ${JSON.stringify(helper_1.readConfig(pages.get(path)))}),
`;
}
function default_1() {
    var _a;
    const options = loader_utils_1.getOptions(this);
    const stringify = (s) => loader_utils_1.stringifyRequest(this, s);
    const { importFrameworkStatement, frameworkArgs, creator, creatorLocation, importFrameworkName, extraImportForWeb, execBeforeCreateWebApp, compatComponentImport, compatComponentExtra } = options.loaderMeta;
    const config = options.config;
    const pages = options.pages;
    const pxTransformConfig = options.pxTransformConfig;
    let tabBarCode = `var tabbarIconPath = []
var tabbarSelectedIconPath = []
`;
    if (config.tabBar) {
        const tabbarList = config.tabBar.list;
        for (let i = 0; i < tabbarList.length; i++) {
            const t = tabbarList[i];
            if (t.iconPath) {
                const iconPath = stringify(path_1.join(path_1.dirname(this.resourcePath), t.iconPath));
                tabBarCode += `tabbarIconPath[${i}] = typeof require(${iconPath}) === 'object' ? require(${iconPath}).default : require(${iconPath})\n`;
            }
            if (t.selectedIconPath) {
                const iconPath = stringify(path_1.join(path_1.dirname(this.resourcePath), t.selectedIconPath));
                tabBarCode += `tabbarSelectedIconPath[${i}] = typeof require(${iconPath}) === 'object' ? require(${iconPath}).default : require(${iconPath})\n`;
            }
        }
    }
    const webComponents = `
import { defineCustomElements, applyPolyfills } from '@tarojs/components/loader'
import '@tarojs/components/dist/taro-components/taro-components.css'
${extraImportForWeb || ''}
applyPolyfills().then(function () {
  defineCustomElements(window)
})
`;
    const components = options.useHtmlComponents ? compatComponentImport || '' : webComponents;
    const code = `import { createRouter, initPxTransform } from '@tarojs/taro'
import component from ${stringify(path_1.join(path_1.dirname(this.resourcePath), options.filename))}
import { window } from '@tarojs/runtime'
import { ${creator} } from '${creatorLocation}'
${importFrameworkStatement}
${components}
var config = ${JSON.stringify(config)}
window.__taroAppConfig = config
${config.tabBar ? tabBarCode : ''}
if (config.tabBar) {
  var tabbarList = config.tabBar.list
  for (var i = 0; i < tabbarList.length; i++) {
    var t = tabbarList[i]
    if (t.iconPath) {
      t.iconPath = tabbarIconPath[i]
    }
    if (t.selectedIconPath) {
      t.selectedIconPath = tabbarSelectedIconPath[i]
    }
  }
}
config.routes = [
  ${(_a = config.pages) === null || _a === void 0 ? void 0 : _a.map(path => genResource(path, pages, this)).join('')}
]
${options.useHtmlComponents ? compatComponentExtra : ''}
${execBeforeCreateWebApp || ''}
var inst = ${creator}(component, ${frameworkArgs})
createRouter(inst, config, ${importFrameworkName})
initPxTransform({
  designWidth: ${pxTransformConfig.designWidth},
  deviceRatio: ${JSON.stringify(pxTransformConfig.deviceRatio)}
})
`;
    return code;
}
exports.default = default_1;
//# sourceMappingURL=h5.js.map