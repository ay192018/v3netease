"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const lodash_1 = require("lodash");
const util_1 = require("../util");
const chain_1 = require("../util/chain");
const base_conf_1 = require("./base.conf");
const emptyObj = {};
function default_1(appPath, config) {
    const chain = base_conf_1.default(appPath, config);
    const { alias = {}, copy, entry = emptyObj, entryFileName = 'app', output = emptyObj, sourceRoot = 'src', outputRoot = 'dist', publicPath = '', staticDirectory = 'static', chunkDirectory = 'chunk', router = emptyObj, designWidth = 750, deviceRatio, enableSourceMap = true, sourceMapType, enableExtract = false, defineConstants = emptyObj, env = emptyObj, styleLoaderOption = emptyObj, cssLoaderOption = emptyObj, sassLoaderOption = emptyObj, lessLoaderOption = emptyObj, stylusLoaderOption = emptyObj, mediaUrlLoaderOption = emptyObj, fontUrlLoaderOption = emptyObj, imageUrlLoaderOption = emptyObj, miniCssExtractPluginOption = emptyObj, esnextModules = [], useHtmlComponents = false, postcss = emptyObj } = config;
    const sourceDir = path.join(appPath, sourceRoot);
    const outputDir = path.join(appPath, outputRoot);
    const plugin = {};
    const isMultiRouterMode = lodash_1.get(router, 'mode') === 'multi';
    plugin.mainPlugin = chain_1.getMainPlugin({
        framework: config.framework,
        entryFileName,
        sourceDir,
        outputDir,
        routerConfig: router,
        useHtmlComponents,
        designWidth,
        deviceRatio
    });
    if (enableExtract) {
        plugin.miniCssExtractPlugin = chain_1.getMiniCssExtractPlugin([
            {
                filename: 'css/[name].css',
                chunkFilename: 'css/[name].css'
            },
            miniCssExtractPluginOption
        ]);
    }
    if (copy) {
        plugin.copyWebpackPlugin = chain_1.getCopyWebpackPlugin({ copy, appPath });
    }
    if (isMultiRouterMode) {
        lodash_1.merge(plugin, lodash_1.mapValues(entry, (_filePath, entryName) => {
            return chain_1.getHtmlWebpackPlugin([{
                    filename: `${entryName}.html`,
                    template: path.join(appPath, sourceRoot, 'index.html'),
                    chunks: [entryName]
                }]);
        }));
    }
    else {
        plugin.htmlWebpackPlugin = chain_1.getHtmlWebpackPlugin([{
                filename: 'index.html',
                template: path.join(appPath, sourceRoot, 'index.html')
            }]);
    }
    plugin.definePlugin = chain_1.getDefinePlugin([chain_1.processEnvOption(env), defineConstants]);
    const mode = 'development';
    chain.merge({
        mode,
        devtool: chain_1.getDevtool({ enableSourceMap, sourceMapType }),
        entry,
        output: chain_1.getOutput(appPath, [{
                outputRoot,
                publicPath: util_1.addLeadingSlash(util_1.addTrailingSlash(publicPath)),
                chunkDirectory
            }, output]),
        resolve: { alias },
        module: chain_1.getModule(appPath, {
            designWidth,
            deviceRatio,
            enableExtract,
            enableSourceMap,
            styleLoaderOption,
            cssLoaderOption,
            lessLoaderOption,
            sassLoaderOption,
            stylusLoaderOption,
            fontUrlLoaderOption,
            imageUrlLoaderOption,
            mediaUrlLoaderOption,
            esnextModules,
            postcss,
            staticDirectory
        }),
        plugin,
        optimization: {
            noEmitOnErrors: true
        }
    });
    return chain;
}
exports.default = default_1;
//# sourceMappingURL=dev.conf.js.map