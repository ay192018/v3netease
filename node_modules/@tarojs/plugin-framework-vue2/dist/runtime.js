import { ensure, noop, isFunction, isBoolean } from '@tarojs/shared';
import { Current, injectPageInstance, document, container, SERVICE_IDENTIFIER } from '@tarojs/runtime';

/**
 * set writable, enumerable to true
 */
function setDefaultDescriptor(obj) {
    obj.writable = true;
    obj.enumerable = true;
    return obj;
}
/**
 * 设置入口的路由参数
 * @param options 小程序传入的参数
 */
function setRouterParams(options) {
    Current.router = Object.assign({ params: options === null || options === void 0 ? void 0 : options.query }, options);
}

let Vue;
function setReconciler() {
    const hooks = container.get(SERVICE_IDENTIFIER.Hooks);
    hooks.onRemoveAttribute = function (dom, qualifiedName) {
        // 处理原因: https://github.com/NervJS/taro/pull/5990
        const props = dom.props;
        if (!props.hasOwnProperty(qualifiedName) || isBoolean(props[qualifiedName])) {
            dom.setAttribute(qualifiedName, false);
            return true;
        }
    };
    hooks.getLifecycle = function (instance, lifecycle) {
        return instance.$options[lifecycle];
    };
    if (process.env.TARO_ENV === 'h5') {
        hooks.createPullDownComponent = (el, path, vue) => {
            const injectedPage = vue.extend({
                props: {
                    tid: String
                },
                mixins: [el, {
                        created() {
                            injectPageInstance(this, path);
                        }
                    }]
            });
            const options = {
                name: 'PullToRefresh',
                render(h) {
                    return h('taro-pull-to-refresh', {
                        class: ['hydrated']
                    }, [h(injectedPage, this.$slots.default)]);
                }
            };
            return options;
        };
        hooks.getDOMNode = (el) => {
            return el.$el;
        };
    }
}
function connectVuePage(Vue, id) {
    return (component) => {
        const injectedPage = Vue.extend({
            props: {
                tid: String
            },
            mixins: [component, {
                    created() {
                        injectPageInstance(this, id);
                    }
                }]
        });
        const options = {
            render(h) {
                return h(process.env.TARO_ENV === 'h5' ? 'div' : 'root', {
                    attrs: {
                        id,
                        class: process.env.TARO_ENV === 'h5' ? 'taro_page' : ''
                    }
                }, [
                    h(injectedPage, { props: { tid: id } })
                ]);
            }
        };
        return options;
    };
}
function createVueApp(App, vue, config) {
    if (process.env.NODE_ENV !== 'production') {
        ensure(!!vue, '构建 Vue 项目请把 process.env.FRAMEWORK 设置为 \'vue\'');
    }
    Vue = vue;
    Vue.config.getTagNamespace = noop;
    const elements = [];
    const pages = [];
    let appInstance;
    setReconciler();
    const wrapper = new Vue({
        render(h) {
            while (pages.length > 0) {
                const page = pages.pop();
                elements.push(page(h));
            }
            return h(App, { ref: 'app' }, elements.slice());
        },
        methods: {
            mount(component, id, cb) {
                pages.push((h) => h(component, { key: id }));
                this.updateSync(cb);
            },
            updateSync(cb) {
                this._update(this._render(), false);
                this.$children.forEach((child) => child._update(child._render(), false));
                cb();
            },
            unmount(id, cb) {
                for (let i = 0; i < elements.length; i++) {
                    const element = elements[i];
                    if (element.key === id) {
                        elements.splice(i, 1);
                        break;
                    }
                }
                this.updateSync(cb);
            }
        }
    });
    if (process.env.TARO_ENV !== 'h5') {
        wrapper.$mount(document.getElementById('app'));
    }
    const hooks = container.get(SERVICE_IDENTIFIER.Hooks);
    const [ONLAUNCH, ONSHOW, ONHIDE] = hooks.getMiniLifecycleImpl().app;
    const appObj = Object.create({
        mount(component, id, cb) {
            const page = connectVuePage(Vue, id)(component);
            wrapper.mount(page, id, cb);
        },
        unmount(id, cb) {
            wrapper.unmount(id, cb);
        }
    }, {
        config: setDefaultDescriptor({
            configurable: true,
            value: config
        }),
        [ONLAUNCH]: setDefaultDescriptor({
            value(options) {
                setRouterParams(options);
                if (process.env.TARO_ENV === 'h5') {
                    // 由于 H5 路由初始化的时候会清除 app 下的 dom 元素，所以需要在路由初始化后再执行 render
                    wrapper.$mount(document.getElementById((config === null || config === void 0 ? void 0 : config.appId) || 'app'));
                }
                appInstance = wrapper.$refs.app;
                if (appInstance != null && isFunction(appInstance.$options.onLaunch)) {
                    appInstance.$options.onLaunch.call(appInstance, options);
                }
            }
        }),
        [ONSHOW]: setDefaultDescriptor({
            value(options) {
                setRouterParams(options);
                if (appInstance != null && isFunction(appInstance.$options.onShow)) {
                    appInstance.$options.onShow.call(appInstance, options);
                }
            }
        }),
        [ONHIDE]: setDefaultDescriptor({
            value(options) {
                if (appInstance != null && isFunction(appInstance.$options.onHide)) {
                    appInstance.$options.onHide.call(appInstance, options);
                }
            }
        })
    });
    Current.app = appObj;
    return appObj;
}

export { connectVuePage, createVueApp };
//# sourceMappingURL=runtime.js.map
