'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var helper = require('@tarojs/helper');
var runnerUtils = require('@tarojs/runner-utils');
var template = require('@tarojs/shared/dist/template');

function getLoaderMeta() {
    return {
        importFrameworkStatement: `
import Vue from 'vue';
`,
        mockAppStatement: `
const App = {
  render (h) {
    // this.$slots.default 是将要会渲染的页面
    return h('block', this.$slots.default)
  }
}
`,
        frameworkArgs: 'Vue, config',
        creator: 'createVueApp',
        creatorLocation: '@tarojs/plugin-framework-vue2/dist/runtime',
        importFrameworkName: 'Vue',
        isNeedRawLoader: true,
        extraImportForWeb: `
require('@tarojs/components/dist-h5/vue')
`
    };
}

const CUSTOM_WRAPPER = 'custom-wrapper';
let isBuildH5;
var index = (ctx) => {
    const { framework } = ctx.initialConfig;
    if (framework !== 'vue')
        return;
    isBuildH5 = process.env.TARO_ENV === 'h5';
    ctx.modifyWebpackChain(({ chain, data }) => {
        customVueChain(chain, data);
        setLoader(chain);
        if (isBuildH5) {
            setStyleLoader(ctx, chain);
        }
    });
};
function getVueLoaderPath() {
    try {
        return require.resolve('vue-loader', {
            paths: [process.cwd()]
        });
    }
    catch (error) {
        // eslint-disable-next-line no-console
        console.log(helper.chalk.yellow('找不到 vue-loader，请先安装。'));
        process.exit(1);
    }
}
function customVueChain(chain, data) {
    const vueLoaderPath = getVueLoaderPath();
    // plugin
    const { VueLoaderPlugin } = require(vueLoaderPath);
    chain
        .plugin('vueLoaderPlugin')
        .use(VueLoaderPlugin);
    // loader
    let vueLoaderOption;
    if (isBuildH5) {
        // H5
        vueLoaderOption = {
            transformAssetUrls: {
                video: ['src', 'poster'],
                'live-player': 'src',
                audio: 'src',
                source: 'src',
                image: 'src',
                'cover-image': 'src',
                'taro-video': ['src', 'poster'],
                'taro-live-player': 'src',
                'taro-audio': 'src',
                'taro-source': 'src',
                'taro-image': 'src',
                'taro-cover-image': 'src'
            },
            compilerOptions: {
                modules: [{
                        preTransformNode(el) {
                            if (runnerUtils.DEFAULT_Components.has(el.tag)) {
                                el.tag = 'taro-' + el.tag;
                            }
                            return el;
                        }
                    }]
            }
        };
    }
    else {
        // 小程序
        vueLoaderOption = {
            optimizeSSR: false,
            transformAssetUrls: {
                video: ['src', 'poster'],
                'live-player': 'src',
                audio: 'src',
                source: 'src',
                image: 'src',
                'cover-image': 'src'
            },
            compilerOptions: {
                whitespace: 'condense',
                modules: [{
                        preTransformNode(el) {
                            const nodeName = el.tag;
                            if (template.capitalize(template.toCamelCase(nodeName)) in template.internalComponents) {
                                data.componentConfig.includes.add(nodeName);
                            }
                            if (nodeName === CUSTOM_WRAPPER) {
                                data.componentConfig.thirdPartyComponents.set(CUSTOM_WRAPPER, new Set());
                            }
                            const usingComponent = data.componentConfig.thirdPartyComponents.get(nodeName);
                            if (usingComponent != null) {
                                el.attrsList
                                    .filter(a => !a.dynamic)
                                    .forEach(a => usingComponent.add(a.name.startsWith(':') ? a.name.slice(1) : a.name));
                            }
                            return el;
                        }
                    }],
                mustUseProp: function () {
                    return false;
                }
            }
        };
    }
    chain.module
        .rule('vue')
        .test(helper.REG_VUE)
        .use('vueLoader')
        .loader(vueLoaderPath)
        .options(vueLoaderOption);
}
function setStyleLoader(ctx, chain) {
    const config = ctx.initialConfig.h5 || {};
    const { styleLoaderOption = {} } = config;
    chain.module
        .rule('customStyle')
        .merge({
        use: [{
                loader: 'style-loader',
                options: styleLoaderOption
            }]
    });
}
function setLoader(chain) {
    if (isBuildH5) {
        chain.plugin('mainPlugin')
            .tap(args => {
            args[0].loaderMeta = getLoaderMeta();
            return args;
        });
    }
    else {
        chain.plugin('miniPlugin')
            .tap(args => {
            args[0].loaderMeta = getLoaderMeta();
            return args;
        });
    }
}

exports['default'] = index;
//# sourceMappingURL=index.js.map
