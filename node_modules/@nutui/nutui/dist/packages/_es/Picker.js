var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
/*!
* @nutui/nutui v3.1.16 Sun Jan 30 2022 10:58:10 GMT+0800 (中国标准时间)
* (c) 2021 @jdf2e.
* Released under the MIT License.
*/
import { ref, reactive, computed, watch, onMounted, toRefs, openBlock, createElementBlock, createElementVNode, normalizeStyle, Fragment, renderList, normalizeClass, toDisplayString, createCommentVNode, toRaw, resolveComponent, createVNode, withCtx } from "vue";
import { c as createComponent } from "./component.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import Popup, { popupProps } from "./Popup.js";
import "./OverLay.js";
import "./Icon.js";
import "./pxCheck.js";
const commonProps = {
  listData: {
    type: Array,
    default: () => {
      return [];
    }
  },
  readonly: {
    type: Boolean,
    default: false
  },
  defaultIndex: {
    type: [Number, String],
    default: 0
  },
  itemHeight: {
    type: [Number, String],
    default: 35
  }
};
const { create: create$1 } = createComponent("picker-column");
const _sfc_main$1 = create$1({
  props: __spreadValues({
    dataType: String,
    itemShow: {
      type: Boolean,
      default: false
    }
  }, commonProps),
  emits: ["click", "change"],
  setup(props, { emit }) {
    const wrapper = ref();
    const state = reactive({
      touchParams: {
        startY: 0,
        endY: 0,
        startTime: 0,
        endTime: 0,
        lastY: 0
      },
      currIndex: 1,
      transformY: 0,
      scrollDistance: 0,
      lineSpacing: 36,
      rotation: 20,
      timer: null
    });
    const roller = ref(null);
    const list = ref(null);
    const listItem = ref(null);
    const touchDeg = ref(0);
    const touchTime = ref(0);
    const touchTranslateY = ref(0);
    const touchListStyle = computed(() => {
      return {
        transition: `transform ${touchTime.value}ms cubic-bezier(0.19, 1, 0.22, 1)`,
        transform: `translate3d(0, ${state.scrollDistance}px, 0)`
      };
    });
    const touchRollerStyle = computed(() => {
      return {
        transition: `transform ${touchTime.value}ms cubic-bezier(0.19, 1, 0.22, 1)`,
        transform: `rotate3d(1, 0, 0, ${touchDeg.value})`
      };
    });
    const onTouchStart = (event) => {
      event.preventDefault();
      let changedTouches = event.changedTouches[0];
      state.touchParams.startY = changedTouches.pageY;
      state.touchParams.startTime = event.timeStamp || Date.now();
      state.transformY = state.scrollDistance;
    };
    const onTouchMove = (event) => {
      event.preventDefault();
      let changedTouches = event.changedTouches[0];
      state.touchParams.lastY = changedTouches.pageY;
      state.touchParams.lastTime = event.timeStamp || Date.now();
      let move = state.touchParams.lastY - state.touchParams.startY;
      setMove(move);
    };
    const onTouchEnd = (event) => {
      event.preventDefault();
      let changedTouches = event.changedTouches[0];
      state.touchParams.lastY = changedTouches.pageY;
      state.touchParams.lastTime = event.timestamp || Date.now();
      let move = state.touchParams.lastY - state.touchParams.startY;
      let moveTime = state.touchParams.lastTime - state.touchParams.startTime;
      if (moveTime <= 300) {
        move = move * 2;
        moveTime = moveTime + 1e3;
        setMove(move, "end", moveTime);
      } else {
        setMove(move, "end");
      }
    };
    const setRollerStyle = (index) => {
      return `transform: rotate3d(1, 0, 0, ${-state.rotation * index}deg) translate3d(0px, 0px, 104px)`;
    };
    const isHidden = (index) => {
      if (index >= state.currIndex + 8 || index <= state.currIndex - 8) {
        return true;
      } else {
        return false;
      }
    };
    const setTransform = (translateY = 0, type, time = 1e3, deg) => {
      if (type === "end") {
        touchTime.value = time;
      } else {
        touchTime.value = 0;
      }
      touchDeg.value = deg;
      touchTranslateY.value = translateY;
      state.scrollDistance = translateY;
    };
    const setMove = (move, type, time) => {
      let updateMove = move + state.transformY;
      if (type === "end") {
        if (updateMove > 0) {
          updateMove = 0;
        }
        if (updateMove < -(props.listData.values.length - 1) * state.lineSpacing) {
          updateMove = -(props.listData.values.length - 1) * state.lineSpacing;
        }
        let endMove = Math.round(updateMove / state.lineSpacing) * state.lineSpacing;
        let deg = `${(Math.abs(Math.round(endMove / state.lineSpacing)) + 1) * state.rotation}deg`;
        setTransform(endMove, type, time, deg);
        let t = time ? time / 2 : 0;
        state.timer = setTimeout(() => {
          setChooseValue();
        }, t);
        state.currIndex = Math.abs(Math.round(endMove / state.lineSpacing)) + 1;
      } else {
        let deg = "0deg";
        if (updateMove < 0) {
          deg = `${(Math.abs(updateMove / state.lineSpacing) + 1) * state.rotation}deg`;
        } else {
          deg = `${(-updateMove / state.lineSpacing + 1) * state.rotation}deg`;
        }
        setTransform(updateMove, null, void 0, deg);
        state.currIndex = Math.abs(Math.round(updateMove / state.lineSpacing)) + 1;
      }
    };
    const setChooseValue = () => {
      emit("change", state.currIndex - 1);
    };
    const modifyStatus = (type) => {
      let index = props.defaultIndex;
      state.currIndex = index === -1 ? 1 : index + 1;
      let move = index === -1 ? 0 : index * state.lineSpacing;
      type && setChooseValue();
      setMove(-move);
    };
    watch(() => props.listData, (val) => {
      state.transformY = 0;
      modifyStatus(false);
    }, {
      deep: true
    });
    watch(() => props.defaultIndex, (val) => {
      state.transformY = 0;
      modifyStatus(false);
    });
    onMounted(() => {
      modifyStatus(true);
    });
    return __spreadProps(__spreadValues(__spreadValues({}, toRefs(state)), toRefs(props)), {
      wrapper,
      setRollerStyle,
      isHidden,
      roller,
      list,
      listItem,
      onTouchStart,
      onTouchMove,
      onTouchEnd,
      touchRollerStyle,
      touchListStyle
    });
  }
});
const _hoisted_1$1 = { class: "nut-picker-content" };
const _hoisted_2$1 = {
  key: 0,
  class: "nut-picker-placeholder"
};
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("view", {
    class: "nut-picker__list",
    onTouchstart: _cache[0] || (_cache[0] = (...args) => _ctx.onTouchStart && _ctx.onTouchStart(...args)),
    onTouchmove: _cache[1] || (_cache[1] = (...args) => _ctx.onTouchMove && _ctx.onTouchMove(...args)),
    onTouchend: _cache[2] || (_cache[2] = (...args) => _ctx.onTouchEnd && _ctx.onTouchEnd(...args))
  }, [
    createElementVNode("view", {
      class: "nut-picker-roller",
      ref: "roller",
      style: normalizeStyle(_ctx.touchRollerStyle)
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.listData.values, (item, index) => {
        return openBlock(), createElementBlock("view", {
          class: normalizeClass(["nut-picker-roller-item", { "nut-picker-roller-item-hidden": _ctx.isHidden(index + 1) }]),
          style: normalizeStyle(_ctx.setRollerStyle(index + 1)),
          key: item.label ? item.label : index
        }, toDisplayString(_ctx.dataType === "cascade" ? item.text : item), 7);
      }), 128))
    ], 4),
    createElementVNode("view", _hoisted_1$1, [
      createElementVNode("view", {
        class: "nut-picker-list-panel",
        ref: "list",
        style: normalizeStyle(_ctx.touchListStyle)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.listData.values, (item, index) => {
          return openBlock(), createElementBlock("view", {
            class: "nut-picker-item nut-picker-item-ref",
            key: item.label ? item.label : index
          }, toDisplayString(_ctx.dataType === "cascade" ? item.text : item), 1);
        }), 128)),
        _ctx.listData && _ctx.listData.length === 1 ? (openBlock(), createElementBlock("view", _hoisted_2$1)) : createCommentVNode("", true)
      ], 4)
    ])
  ], 32);
}
var column = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
const { create, componentName } = createComponent("picker");
const _sfc_main = create({
  components: {
    [column.name]: column,
    [Popup.name]: Popup
  },
  props: __spreadValues(__spreadProps(__spreadValues({}, popupProps), {
    title: {
      type: String,
      default: ""
    },
    cancelText: {
      type: String,
      default: "\u53D6\u6D88"
    },
    okText: {
      type: String,
      default: "\u786E\u5B9A"
    }
  }), commonProps),
  emits: ["close", "change", "confirm", "update:visible"],
  setup(props, { emit }) {
    const childrenKey = "children";
    const valuesKey = "values";
    const state = reactive({
      show: false,
      formattedColumns: props.listData,
      defaultIndex: props.defaultIndex
    });
    let _defaultIndex = props.defaultIndex;
    let defaultIndexList = [];
    const classes = computed(() => {
      const prefixCls = componentName;
      return {
        [prefixCls]: true
      };
    });
    const dataType = computed(() => {
      const firstColumn = state.formattedColumns[0];
      if (typeof firstColumn === "object") {
        if (firstColumn[childrenKey]) {
          return "cascade";
        } else if (firstColumn == null ? void 0 : firstColumn[valuesKey]) {
          addDefaultIndexList(props.listData);
          return "multipleColumns";
        }
      }
      return "text";
    });
    const columnList = computed(() => {
      if (dataType.value === "text") {
        return [{ values: state.formattedColumns, defaultIndex: state.defaultIndex }];
      } else if (dataType.value === "multipleColumns") {
        return state.formattedColumns;
      } else if (dataType.value === "cascade") {
        return formatCascade(state.formattedColumns, state.defaultIndex);
      }
      return state.formattedColumns;
    });
    const addDefaultIndexList = (listData) => {
      defaultIndexList = [];
      listData.forEach((res) => {
        defaultIndexList.push(res.defaultIndex || 0);
      });
    };
    const formatCascade = (listData, defaultIndex) => {
      const formatted = [];
      let children = listData;
      children.defaultIndex = defaultIndex;
      while (children) {
        formatted.push({
          values: children,
          defaultIndex: children.defaultIndex || 0
        });
        children = children == null ? void 0 : children[children.defaultIndex || 0].children;
      }
      addDefaultIndexList(formatted);
      return formatted;
    };
    const getCascadeData = (listData, defaultIndex) => {
      var _a;
      let arr = listData;
      arr.defaultIndex = defaultIndex;
      const dataList = [];
      while (arr) {
        const item = arr[(_a = arr.defaultIndex) != null ? _a : 0];
        dataList.push(item.text);
        arr = item.children;
      }
      return dataList;
    };
    const close = () => {
      emit("close");
      emit("update:visible", false);
    };
    const changeHandler = (columnIndex, dataIndex) => {
      if (dataType.value === "cascade") {
        let cursor = state.formattedColumns;
        if (columnIndex === 0) {
          state.defaultIndex = dataIndex;
        }
        let i = 0;
        while (cursor) {
          if (i === columnIndex) {
            cursor.defaultIndex = dataIndex;
          } else if (i > columnIndex) {
            cursor.defaultIndex = 0;
          }
          cursor = cursor[cursor.defaultIndex || 0].children;
          i++;
        }
      } else if (dataType.value === "text") {
        _defaultIndex = dataIndex;
      } else if (dataType.value === "multipleColumns") {
        defaultIndexList[columnIndex] = dataIndex;
        const val = defaultIndexList.map((res, i) => toRaw(state.formattedColumns)[i].values[res]);
        emit("change", val, columnIndex, dataIndex);
      }
    };
    const confirm = () => {
      if (dataType.value === "text") {
        state.defaultIndex = _defaultIndex;
        emit("confirm", state.formattedColumns[_defaultIndex]);
      } else if (dataType.value === "multipleColumns") {
        for (let i = 0; i < defaultIndexList.length; i++) {
          state.formattedColumns[i].defaultIndex = defaultIndexList[i];
        }
        const checkedArr = toRaw(state.formattedColumns).map((res) => res.values && res.values[res.defaultIndex]);
        emit("confirm", checkedArr);
      } else if (dataType.value === "cascade") {
        emit("confirm", getCascadeData(toRaw(state.formattedColumns), state.defaultIndex));
      }
      emit("update:visible", false);
    };
    watch(() => props.visible, (val) => {
      state.show = val;
    });
    watch(() => props.listData, (val) => {
      state.formattedColumns = val;
    });
    return __spreadProps(__spreadValues({
      classes
    }, toRefs(state)), {
      column,
      dataType,
      columnList,
      close,
      changeHandler,
      confirm
    });
  }
});
const _hoisted_1 = { class: "nut-picker__bar" };
const _hoisted_2 = { class: "nut-picker__column" };
const _hoisted_3 = /* @__PURE__ */ createElementVNode("view", { class: "nut-picker__hairline" }, null, -1);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_picker_column = resolveComponent("nut-picker-column");
  const _component_nut_popup = resolveComponent("nut-popup");
  return openBlock(), createElementBlock("view", {
    class: normalizeClass(_ctx.classes)
  }, [
    createVNode(_component_nut_popup, {
      position: "bottom",
      visible: _ctx.show,
      "onUpdate:visible": _cache[2] || (_cache[2] = ($event) => _ctx.show = $event),
      teleport: _ctx.teleport,
      "lock-scroll": _ctx.lockScroll,
      "close-on-click-overlay": _ctx.closeOnClickOverlay,
      onClose: _ctx.close,
      round: true
    }, {
      default: withCtx(() => [
        createElementVNode("view", _hoisted_1, [
          createElementVNode("view", {
            class: "nut-picker__left nut-picker__button",
            onClick: _cache[0] || (_cache[0] = (...args) => _ctx.close && _ctx.close(...args))
          }, toDisplayString(_ctx.cancelText), 1),
          createElementVNode("view", null, toDisplayString(_ctx.title), 1),
          createElementVNode("view", {
            class: "nut-picker__button",
            onClick: _cache[1] || (_cache[1] = ($event) => _ctx.confirm())
          }, toDisplayString(_ctx.okText), 1)
        ]),
        createElementVNode("view", _hoisted_2, [
          _hoisted_3,
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.columnList, (item, columnIndex) => {
            return openBlock(), createElementBlock("view", {
              class: "nut-picker__columnitem",
              key: columnIndex
            }, [
              createVNode(_component_nut_picker_column, {
                itemShow: _ctx.show,
                "list-data": item,
                readonly: _ctx.readonly,
                "default-index": item.defaultIndex,
                "visible-item-count": _ctx.visibleItemCount,
                "data-type": _ctx.dataType,
                onChange: (dataIndex) => {
                  _ctx.changeHandler(columnIndex, dataIndex);
                }
              }, null, 8, ["itemShow", "list-data", "readonly", "default-index", "visible-item-count", "data-type", "onChange"])
            ]);
          }), 128))
        ])
      ]),
      _: 1
    }, 8, ["visible", "teleport", "lock-scroll", "close-on-click-overlay", "onClose"])
  ], 2);
}
var picker = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { picker as default };
