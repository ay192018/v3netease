/*!
* @nutui/nutui v3.1.16 Sun Jan 30 2022 10:58:10 GMT+0800 (中国标准时间)
* (c) 2021 @jdf2e.
* Released under the MIT License.
*/
import { c as createComponent } from "./component.js";
import { toRefs, computed, onMounted, resolveComponent, openBlock, createElementBlock, renderSlot, createElementVNode, createBlock, normalizeClass, normalizeStyle, createCommentVNode, Fragment, renderList } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
const component = {
  props: {
    width: {
      type: String,
      default: "100px"
    },
    height: {
      type: String,
      default: "100px"
    },
    animated: {
      type: Boolean,
      default: false
    },
    avatar: {
      type: Boolean,
      default: false
    },
    avatarShape: {
      type: String,
      default: "round"
    },
    avatarSize: {
      type: String,
      default: "50px"
    },
    loading: {
      type: Boolean,
      default: true
    },
    round: {
      type: Boolean,
      default: false
    },
    row: {
      type: String,
      default: "1"
    },
    title: {
      type: Boolean,
      default: true
    }
  },
  setup(props) {
    const { avatarShape, round, avatarSize } = toRefs(props);
    const avatarClass = computed(() => {
      const prefixCls = "avatarClass";
      return {
        [prefixCls]: true,
        [`${prefixCls}--${avatarShape.value}`]: avatarShape.value
      };
    });
    const blockClass = computed(() => {
      const prefixCls = "blockClass";
      return {
        [prefixCls]: true,
        [`${prefixCls}--round`]: round.value
      };
    });
    const getStyle = () => {
      if (avatarSize == null ? void 0 : avatarSize.value) {
        return {
          width: avatarSize.value,
          height: avatarSize.value
        };
      }
      return {
        width: "50px",
        height: "50px"
      };
    };
    onMounted(() => {
      console.log("row", props.row);
    });
    return {
      avatarShape,
      avatarClass,
      blockClass,
      getStyle
    };
  }
};
const { create } = createComponent("skeleton");
const _sfc_main = create(component);
const _hoisted_1 = { key: 0 };
const _hoisted_2 = {
  key: 1,
  class: "skeleton"
};
const _hoisted_3 = /* @__PURE__ */ createElementVNode("view", { class: "skeleton-animation" }, null, -1);
const _hoisted_4 = { class: "content" };
const _hoisted_5 = { class: "content-line" };
const _hoisted_6 = {
  key: 0,
  class: "title"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_avatar = resolveComponent("nut-avatar");
  return !_ctx.loading ? (openBlock(), createElementBlock("view", _hoisted_1, [
    renderSlot(_ctx.$slots, "default")
  ])) : (openBlock(), createElementBlock("view", _hoisted_2, [
    _hoisted_3,
    createElementVNode("view", _hoisted_4, [
      _ctx.avatar ? (openBlock(), createBlock(_component_nut_avatar, {
        key: 0,
        class: normalizeClass(_ctx.avatarClass),
        shape: _ctx.avatarShape,
        style: normalizeStyle(_ctx.getStyle()),
        "bg-color": "rgb(239, 239, 239)"
      }, null, 8, ["class", "shape", "style"])) : createCommentVNode("", true),
      Number(_ctx.row) == 1 ? (openBlock(), createElementBlock("view", {
        key: 1,
        class: normalizeClass(_ctx.blockClass),
        style: normalizeStyle({ width: _ctx.width, height: _ctx.height })
      }, null, 6)) : createCommentVNode("", true),
      createElementVNode("view", _hoisted_5, [
        _ctx.title ? (openBlock(), createElementBlock("view", _hoisted_6)) : createCommentVNode("", true),
        (openBlock(true), createElementBlock(Fragment, null, renderList(Number(_ctx.row), (item, index2) => {
          return openBlock(), createElementBlock("view", {
            key: index2,
            class: normalizeClass(_ctx.blockClass),
            style: normalizeStyle({ width: _ctx.width, height: _ctx.height })
          }, null, 6);
        }), 128))
      ])
    ])
  ]));
}
var index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index as default };
